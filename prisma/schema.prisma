// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r tsconfig-paths/register prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumAssistantArea {
  BRAND_EXPERT // Lily
  MARKETING_ASSISTANT // Zoe
  FINCANCE_ASSISTANT // Oscar
  UPSELL_ASSISTANT // Niko
}

model AIAssistant {
  id          String                    @id @default(uuid())
  name        String                    @unique
  area        EnumAssistantArea
  available   Boolean                   @default(false)
  description Json
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  features    AIAssistantFeature[]
  assignments CompanyAIAssistant[]
}

model AIAssistantFeature {
  id             String         @id @default(uuid())
  aiAssistant    AIAssistant    @relation(fields: [aiAssistantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  aiAssistantId  String
  keyName        String
  title          Json
  description    Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  CompanyAIAssistantFeature CompanyAIAssistantFeature[]

  @@unique([keyName])
  @@index([aiAssistantId])
}

// implementar endpoint
model CompanyAIAssistant {
  id             String                    @id @default(uuid())
  company        Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  aiAssistant    AIAssistant               @relation(fields: [aiAssistantId], references: [id], onDelete: Cascade)
  aiAssistantId  String
  enabled        Boolean                   @default(false)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt

  features       CompanyAIAssistantFeature[]

  @@unique([companyId, aiAssistantId])
  @@index([companyId])
  @@index([aiAssistantId])
}

// Enable/disable individual features per company & assistant
model CompanyAIAssistantFeature {
  id                          String                 @id @default(uuid())
  assignment                  CompanyAIAssistant     @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId                String
  aiAssistantFeature          AIAssistantFeature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId                   String
  enabled                     Boolean                @default(false)
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt

  @@unique([assignmentId, featureId])
  @@index([assignmentId])
  @@index([featureId])
}

// por implementar
model AvatarList {
  id          String   @id @default(uuid())
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// por implementar en guards
model Sessions {
  id           String   @id @default(uuid())
  userId       String
  sessionToken String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId])
}

// seed
model Country {
  id          String   @id @default(uuid())
  name        String   @unique
  imageUrl    String?
  phoneCode   String   @unique
  langCode    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  states        State[]

  UserAddress UserAddress[]
}

// seed
model State {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  country     Country  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId   String

  UserAddress UserAddress[]
  
  @@index([countryId])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  secondLastName String?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  otpEnabled    Boolean   @default(false)
  otpSecret     String?
  lastLoginAt   DateTime?
  companyId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  bannedUntil   DateTime? // por implementar
  banReason     String?   // por implementar
  agentPhone    String?   // por implementar

  company       Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  roles         UserRole[]
  otps          Otp[]
  refreshTokens RefreshToken[]
  passwordResets PasswordReset[]
  files         File[]
  profile       UserProfile? // por implementar
  address       UserAddress? // por implementar
  sessions      Sessions[] // por implementar
  
  @@index([companyId])
  @@unique([agentPhone, companyId])
}

// por implementar en endpoint
model UserProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  phone     String?
  avatarUrl String?
  bio       String?
  birthdate String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

// por implementar en endpoint
model UserAddress {
  id              String    @id @default(uuid())

  country   Country? @relation(fields: [countryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  countryId String?

  state     State?   @relation(fields: [stateId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  stateId   String?

  city            String?
  street          String?
  exteriorNumber  String?
  interiorNumber  String?
  postalCode      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String @unique
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  resource    String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  roles       RolePermission[]
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Otp {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  secret     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model EmailVerification {
  id         String    @id @default(uuid())
  email      String    
  code       String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  
  @@index([email])
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  email     String    
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([email])
  @@index([token])
}

model File {
  id          String    @id @default(uuid())
  filename    String
  originalName String
  path        String
  mimeType    String
  size        Int
  bucket      String
  userId      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
}

model Company {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String
  businessSector String
  businessUnit  String
  host          String    @unique
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  timezone      String? @default("America/Mexico_City")
  currency      String? @default("MXN")
  logoUrl       String?
  websiteUrl    String?
  privacyPolicyUrl String?
  language      String @default("es-MX")
  
  address       Address?
  users         User[]
  assistants    CompanyAIAssistant[]
}

model Address {
  id              String    @id @default(uuid())
  country         String
  state           String
  city            String
  street          String
  exteriorNumber  String
  interiorNumber  String?
  postalCode      String
  companyId       String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
