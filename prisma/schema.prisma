// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r tsconfig-paths/register prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumAssistantArea {
  BRAND_EXPERT // Lily
  MARKETING_ASSISTANT // Zoe
  FINCANCE_ASSISTANT // Oscar
  UPSELL_ASSISTANT // Niko
}

enum EnumIndustrySector {
  AUTOMOTIVE
  CUSTOMER_SERVICE
  EDUCATION
  HEALTHCARE
  REAL_ESTATE
  OTHER
}

enum EnumIndustryOperationChannel {
  ONLINE
  PHYSICAL
  MIXED
}

model CompanyEventsCatalog {
  title       Json // { en-US: "Event Title", es-MX: "Título del Evento" }
  description Json // { en-US: "Event Description", es-MX: "Descripción del Evento" }
  iconUrl     String? // URL to an icon image for the event
  color       String? // Hex color code for the event (e.g., "#FF5733")
  isActive    Boolean @default(true)
  isOnline    Boolean @default(false) // Indicates if the event is online or in-person
  isPhysical  Boolean @default(false) // Indicates if the event is physical or online
  isAppointment Boolean @default(false) // Indicates if the event is an appointment
  eventName   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String

  @@unique([companyId, eventName])
}

model CompanySchedules {
  id          String   @id @default(uuid())
  dayOfWeek   Int      // 0=Sunday, 1=Monday, ..., 6=Saturday
  startTime   DateTime // Solo hora y minutos
  endTime     DateTime // Solo hora y minutos
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String

  @@unique([companyId, dayOfWeek])
}

// === ENUMS PARA SISTEMA DE CITAS Y KPIS ===
enum AppointmentStatus {
  PENDING      // Pendiente
  CONFIRMED    // Confirmada
  IN_PROGRESS  // En curso
  COMPLETED    // Finalizada
  CANCELLED    // Cancelada
  NO_SHOW      // No asistió
  RESCHEDULED  // Reprogramada
}

enum ScheduleType {
  WORKING_HOURS // Horario de trabajo
  BREAK_TIME    // Tiempo de descanso
  UNAVAILABLE   // No disponible
}

enum VisibilityLevel {
  PUBLIC       // Visible para todos
  INTERNAL     // Solo para la empresa
  PRIVATE      // Solo para el empleado
  RESTRICTED   // Acceso restringido
}

enum AuditOperation {
  CREATE
  UPDATE  
  DELETE
  SOFT_DELETE
  RESTORE
  BULK_UPDATE
  BULK_DELETE
  STATUS_CHANGE
  PERMISSION_CHANGE
  CUSTOM
}

enum AppointmentEventType {
  CREATED           // Cita creada
  CONFIRMED         // Cita confirmada
  CANCELLED         // Cita cancelada
  RESCHEDULED       // Cita reagendada
  COMPLETED         // Cita completada
  NO_SHOW           // Cliente no asistió
  STARTED           // Cita iniciada
  EMPLOYEE_CHANGED  // Cambio de empleado
  UPDATED           // Información actualizada
  DELETED           // Cita eliminada
  RESTORED          // Cita restaurada
}

enum AggregateType {
  HOURLY    // Agregados por hora
  DAILY     // Agregados diarios
  WEEKLY    // Agregados semanales  
  MONTHLY   // Agregados mensuales
  QUARTERLY // Agregados trimestrales
  YEARLY    // Agregados anuales
}

enum EventSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum PartitioningStrategy {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum DataQuality {
  COMPLETE
  PARTIAL
  ESTIMATED
}

// === SISTEMA DE HORARIOS ===
model UserSchedules {
  id            String      @id @default(uuid())
  userId        String
  dayOfWeek     Int         // 0=Sunday, 1=Monday, ..., 6=Saturday
  startTime     DateTime    // Hora de inicio (solo hora y minutos)
  endTime       DateTime    // Hora de fin (solo hora y minutos)
  scheduleType  ScheduleType @default(WORKING_HOURS)
  isActive      Boolean     @default(true)
  isRecurring   Boolean     @default(true) // Si se repite semanalmente
  validFrom     DateTime?   // Fecha desde cuando es válido
  validUntil    DateTime?   // Fecha hasta cuando es válido
  notes         String?     // Notas adicionales
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId     String

  @@index([userId, dayOfWeek])
  @@index([companyId])
  @@unique([userId, dayOfWeek, startTime, endTime, scheduleType])
}

// === SISTEMA DE CITAS ROBUSTO ===
model Appointments {
  id                    String            @id @default(uuid())
  
  // Información básica de la cita
  title                 String
  description           String?
  status                AppointmentStatus @default(PENDING)
  
  // Horarios - endDateTime se calcula automáticamente
  startDateTime         DateTime
  estimatedDuration     Int               // Duración estimada en minutos
  actualDuration        Int?              // Duración real en minutos
  
  // IDs como strings (SIN foreign keys para preservar historial)
  companyId             String            // No FK - preserva historial
  employeeId            String            // No FK - preserva historial
  clientId              String?           // No FK - preserva historial
  eventTypeId           String            // No FK - preserva historial
  
  // Información denormalizada (para consultas rápidas)
  companyName           String
  employeeName          String
  employeeEmail         String
  clientName            String?
  clientEmail           String?
  eventTypeName         String
  
  // Control de aplicación
  createdByApp          String
  externalId            String?
  
  // Información del cliente
  clientPhone           String?
  accompaniedCount      Int               @default(0)
  
  // Visibilidad y notas
  visibility            VisibilityLevel   @default(INTERNAL)
  notes                 String?
  internalNotes         String?
  clientNotes           String?
  
  // Archivos y recursos
  attachmentUrls        Json?             // Array de URLs
  
  // Metadatos flexibles
  metadata              Json?
  
  // Control de cambios (SIN FK)
  originalEmployeeId    String?           // ID original (sin FK)
  originalEmployeeName  String?           // Nombre denormalizado
  rescheduledFromId     String?           // ID de cita original (sin FK)
  cancellationReason    String?
  
  // Empleados acompañantes (denormalizado)
  supportingEmployees   Json?             // Array de objetos con employeeId, name, role
  
  // Sistema de recordatorios como array de eventos procesados
  reminderEvents        String[]          @default([]) // Array de eventos de recordatorio procesados
  reminderSchedule      Json?             // Configuración de recordatorios programados
  
  // Soft delete
  isDeleted             Boolean           @default(false)
  deletedAt             DateTime?
  deletedBy             String?           // ID del usuario que eliminó
  deletedReason         String?
  
  // Auditoría - pueden ser null para citas automáticas/externas
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  createdBy             String?           // ID del usuario creador (puede ser null)
  lastModifiedBy        String?           // ID del último modificador (puede ser null)
  confirmedAt           DateTime?
  startedAt             DateTime?
  completedAt           DateTime?
  
  // Versioning
  version               Int               @default(1)
  
  // Historial
  history               AppointmentHistory[]
  
  // Índices optimizados
  @@index([companyId, startDateTime])
  @@index([employeeId, startDateTime])
  @@index([clientId])
  @@index([status, isDeleted])
  @@index([createdByApp])
  @@index([startDateTime, estimatedDuration])  // Para calcular endDateTime
  @@index([isDeleted, companyId])              // Para filtrar eliminados
  @@index([version, updatedAt])                // Para consultas de historial
}

// === HISTORIAL DE CITAS ===
model AppointmentHistory {
  id                    String            @id @default(uuid())
  appointmentId         String            // ID de la cita principal
  
  // Snapshot completo de todos los campos en el momento del cambio
  title                 String
  description           String?
  status                AppointmentStatus
  startDateTime         DateTime
  estimatedDuration     Int?              // Puede ser null en el historial
  actualDuration        Int?
  
  companyId             String
  employeeId            String
  clientId              String?
  eventTypeId           String
  
  companyName           String
  employeeName          String
  employeeEmail         String
  clientName            String?
  clientEmail           String?
  eventTypeName         String
  
  createdByApp          String
  externalId            String?
  clientPhone           String?
  accompaniedCount      Int
  
  visibility            VisibilityLevel
  notes                 String?
  internalNotes         String?
  clientNotes           String?
  attachmentUrls        Json?
  metadata              Json?
  
  originalEmployeeId    String?
  originalEmployeeName  String?
  rescheduledFromId     String?
  cancellationReason    String?
  supportingEmployees   Json?
  
  // Sistema de recordatorios en el historial
  reminderEvents        String[]          @default([])
  reminderSchedule      Json?
  
  // Información del cambio
  changeType            String            // CREATE, UPDATE, DELETE, STATUS_CHANGE, etc.
  changedFields         Json?             // Array de campos que cambiaron
  previousValues        Json?             // Valores anteriores de campos cambiados
  changeReason          String?           // Razón del cambio
  
  // Auditoría del historial
  version               Int               // Versión de la cita en este momento
  createdAt             DateTime          @default(now()) // Momento del cambio
  createdBy             String?           // Quien hizo el cambio (puede ser null)
  userAgent             String?           // Info del navegador/app
  ipAddress             String?           // IP del usuario
  
  // Relación (solo para organización, no constraint)
  appointment           Appointments      @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  
  @@index([appointmentId, version])
  @@index([appointmentId, createdAt])
  @@index([changeType])
  @@index([createdBy])
  @@index([createdAt])
}

// === SISTEMA UNIVERSAL DE AUDITORÍA ===
model UniversalAuditLog {
  id                    String   @id @default(uuid())
  
  // Identificación de la entidad auditada
  entityType            String   // 'appointments', 'chat_messages', 'users', etc.
  entityId              String   // ID del registro auditado
  entityTable           String   // Nombre físico de la tabla
  
  // Particionado estratégico
  eventDate             DateTime // CLAVE DE PARTICIÓN PRINCIPAL
  eventDateTime         DateTime @default(now())
  eventMonth            Int      // Para particiones mensuales
  eventYear             Int      // Para particiones anuales
  eventHour             Int      // 0-23 (para análisis por hora)
  eventDayOfWeek        Int      // 0-6 (para análisis por día semana)
  eventWeekOfYear       Int      // 1-53 (para análisis semanal)
  eventQuarter          Int      // 1-4 (para análisis trimestral)
  
  // Contexto empresarial (común a todas las entidades)
  companyId             String
  userId                String?  // Usuario que hizo el cambio
  sessionId             String?  // Sesión activa
  
  // Tipo de operación
  operation             AuditOperation
  changeType            String   // Específico por entidad: 'STATUS_CHANGE', 'MESSAGE_SENT', etc.
  
  // Datos del cambio
  beforeData            Json?    // Estado anterior (JSONB comprimido)
  afterData             Json     // Estado posterior (JSONB comprimido)
  changedFields         Json?    // Solo campos que cambiaron
  
  // Metadatos técnicos
  applicationSource     String   // App que generó el cambio
  userAgent            String?
  ipAddress            String?
  apiEndpoint          String?
  
  // Información contextual
  changeReason         String?
  businessContext      Json?    // Contexto específico del negocio
  
  // Métricas calculadas (para KPIs rápidos)
  impactScore          Int?     // Score de impacto del cambio (1-100)
  processingTimeMs     Int?     // Tiempo de procesamiento
  
  @@index([eventDate, entityType, companyId])           // Partición + filtros principales
  @@index([companyId, eventDate, entityType])           // Consultas por empresa
  @@index([entityType, entityId, eventDateTime])        // Historial de entidad específica
  @@index([userId, eventDate])                          // Actividad por usuario
  @@index([operation, eventDate])                       // Por tipo de operación
  @@index([companyId, changeType, eventDate])           // KPIs específicos por empresa
  @@index([eventDateTime])                              // Consultas temporales precisas
  @@index([companyId, eventDateTime])                   // Rango temporal por empresa
}

// === CONFIGURACIÓN DE KPIS ===
model KPIConfiguration {
  id                    String   @id @default(uuid())
  
  // Identificación del KPI
  kpiCode               String   @unique // 'appointment_conversion', 'chat_response_time', etc.
  entityType            String   // Tipo de entidad a medir
  kpiName               Json     // Nombre multiidioma
  description           Json     // Descripción multiidioma
  
  // Configuración del cálculo
  calculationQuery      String   // Query SQL para calcular el KPI
  aggregationPeriods    Json     // ['HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY']
  dimensions            Json     // Dimensiones para agregar: ['companyId', 'userId', 'channelId']
  
  // Configuración de performance
  isRealTime            Boolean  @default(false) // Si se calcula en tiempo real
  cacheEnabled          Boolean  @default(true)  
  cacheTTLMinutes       Int?     @default(60)
  
  // Configuración de almacenamiento
  retentionDays         Int      @default(730)   // 2 años por defecto
  compressionEnabled    Boolean  @default(true)
  partitioningStrategy  PartitioningStrategy @default(MONTHLY)
  
  // Control de activación
  isActive              Boolean  @default(true)
  companiesEnabled      Json?    // Array de companyIds habilitadas (null = todas)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relación con valores calculados
  values                KPIValue[]
  
  @@index([entityType, isActive])
  @@index([kpiCode, isActive])
}

// === VALORES DE KPIS CALCULADOS ===
model KPIValue {
  id                    String        @id @default(uuid())
  
  // Referencia a configuración
  kpiConfigId           String
  kpiCode               String        // Denormalizado para performance
  
  // Particionado temporal
  periodDate            DateTime      // CLAVE DE PARTICIÓN
  periodType            AggregateType // HOURLY, DAILY, etc.
  periodYear            Int
  periodMonth           Int?
  periodWeek            Int?
  periodDay             Int?
  periodHour            Int?
  
  // Dimensiones (flexibles según configuración)
  companyId             String
  dimensionValues       Json          // Valores de todas las dimensiones configuradas
  
  // Valores del KPI
  numericValue          Decimal?      @db.Decimal(15,4)
  stringValue           String?
  jsonValue             Json?
  booleanValue          Boolean?
  
  // Metadatos del cálculo
  recordCount           Int           // Registros procesados
  calculatedAt          DateTime      @default(now())
  calculationTimeMs     Int?          // Tiempo de cálculo
  dataQuality           DataQuality   @default(COMPLETE)
  
  // Información contextual
  metadata              Json?         // Metadatos adicionales
  
  // Relaciones
  kpiConfig             KPIConfiguration @relation(fields: [kpiConfigId], references: [id], onDelete: Cascade)
  
  @@unique([kpiConfigId, periodDate, periodType, companyId, dimensionValues])
  @@index([kpiCode, companyId, periodDate, periodType])
  @@index([companyId, periodDate, periodType])
  @@index([periodDate, periodType])
  @@index([calculatedAt]) // Para jobs de recálculo
}

// === SISTEMA DE EVENTOS ===
model SystemEvent {
  id                    String   @id @default(uuid())
  
  // Identificación del evento
  eventType             String   // 'ENTITY_CHANGED', 'KPI_THRESHOLD_REACHED', etc.
  entityType            String   // Tipo de entidad que generó el evento
  entityId              String   // ID de la entidad
  
  // Particionado temporal
  eventDate             DateTime // CLAVE DE PARTICIÓN
  eventDateTime         DateTime @default(now())
  
  // Contexto empresarial
  companyId             String
  userId                String?
  
  // Datos del evento
  eventData             Json     // Datos completos del evento
  severity              EventSeverity @default(INFO)
  
  // Estado de procesamiento
  isProcessed           Boolean  @default(false)
  processedAt           DateTime?
  processingErrors      Json?    // Errores durante procesamiento
  
  // Configuración de acciones
  triggeredActions      Json?    // Acciones que se dispararon
  
  @@index([eventDate, eventType, companyId])
  @@index([isProcessed, eventDateTime])
  @@index([companyId, eventType, eventDateTime])
  @@index([entityType, entityId, eventDateTime])
}

// === CACHE DE CONSULTAS ===
model QueryCache {
  id                    String   @id @default(uuid())
  
  // Clave de la consulta (hash de parámetros)
  queryHash             String   @unique
  
  // Parámetros de la consulta
  companyId             String?
  entityType            String?
  queryParams           Json     // Parámetros completos de la consulta
  
  // Resultado cacheado
  resultData            Json     // Resultado completo cacheado
  resultSize            Int      // Tamaño del resultado en bytes
  
  // Metadatos del cache
  calculatedAt          DateTime @default(now())
  expiresAt             DateTime // TTL del cache
  hitCount              Int      @default(0) // Número de veces consultado
  lastAccessedAt        DateTime @default(now())
  
  @@index([queryHash])
  @@index([companyId, expiresAt])
  @@index([expiresAt])                        // Para limpieza automática
  @@index([lastAccessedAt])                   // Para estadísticas de uso
}

// === ARCHIVO DE DATOS ANTIGUOS ===
model DataArchive {
  id                    String   @id @default(uuid())
  originalTable         String   // 'appointments', 'universal_audit_log', etc.
  originalId            String   // ID del registro original
  companyId             String
  
  // Datos archivados (comprimidos)
  archivedData          Json     // Datos completos en JSONB comprimido
  archiveDate           DateTime @default(now())
  archiveReason         String   // 'AGE_BASED', 'MANUAL', 'COMPLIANCE'
  
  // Metadatos de archivo
  originalCreatedAt     DateTime
  dataSize              Int      // Tamaño en bytes
  compressionRatio      Decimal? @db.Decimal(4,2)
  
  @@index([companyId, archiveDate])
  @@index([originalTable, originalId])
  @@index([archiveDate])  // Para limpieza automática
} 

model AIAssistant {
  id          String                    @id @default(uuid())
  name        String                    @unique
  area        EnumAssistantArea
  available   Boolean                   @default(false)
  description Json
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  features    AIAssistantFeature[]
  assignments CompanyAIAssistant[]
}

model AIAssistantFeature {
  id             String         @id @default(uuid())
  aiAssistant    AIAssistant    @relation(fields: [aiAssistantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  aiAssistantId  String
  keyName        String
  title          Json
  description    Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  CompanyAIAssistantFeature CompanyAIAssistantFeature[]

  @@unique([keyName])
  @@index([aiAssistantId])
}

model CompanyAIAssistant {
  id             String                    @id @default(uuid())
  company        Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  aiAssistant    AIAssistant               @relation(fields: [aiAssistantId], references: [id], onDelete: Cascade)
  aiAssistantId  String
  enabled        Boolean                   @default(false)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt

  features       CompanyAIAssistantFeature[]

  @@unique([companyId, aiAssistantId])
  @@index([companyId])
  @@index([aiAssistantId])
}

model CompanyAIAssistantFeature {
  id                          String                 @id @default(uuid())
  assignment                  CompanyAIAssistant     @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId                String
  aiAssistantFeature          AIAssistantFeature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId                   String
  enabled                     Boolean                @default(false)
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt

  @@unique([assignmentId, featureId])
  @@index([assignmentId])
  @@index([featureId])
}

// por implementar
model AvatarList {
  id          String   @id @default(uuid())
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sessions {
  id           String   @id @default(uuid())
  userId       String
  sessionToken String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId])
}

model Country {
  id          String   @id @default(uuid())
  name        String   @unique
  imageUrl    String?
  phoneCode   String   @unique
  langCode    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  states        State[]

  UserAddress UserAddress[]
}

model State {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  country     Country  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId   String

  UserAddress UserAddress[]
  
  @@index([countryId])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  secondLastName String?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  otpEnabled    Boolean   @default(false)
  otpSecret     String?
  lastLoginAt   DateTime?
  companyId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  bannedUntil   DateTime?
  banReason     String?
  agentPhone    String?   // se usa para buscar a los agentes de ventas por su número de teléfono en la compañia (tenat-id)
  agentPhoneCountryCode String? @default("52") // código de país para agentPhone (ej: 52 para México)

  company       Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  roles         UserRole[]
  otps          Otp[]
  refreshTokens RefreshToken[]
  passwordResets PasswordReset[]
  files         File[]
  profile       UserProfile?
  address       UserAddress?
  sessions      Sessions[]
  schedules     UserSchedules[]
  
  @@index([companyId])
  @@unique([agentPhone, companyId])
}

model UserProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  phone     String?
  phoneCountryCode String? @default("52") // código de país para phone (ej: 52 para México)
  avatarUrl String?
  bio       String?
  birthdate String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model UserAddress {
  id              String    @id @default(uuid())

  country   Country? @relation(fields: [countryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  countryId String?

  state     State?   @relation(fields: [stateId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  stateId   String?

  city            String?
  street          String?
  exteriorNumber  String?
  interiorNumber  String?
  postalCode      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String @unique
}

model Role {
  id                String   @id @default(uuid())
  name              String   @unique
  description       String
  hierarchyLevel    Int      @default(5) // 1=root, 2=admin, 3=manager, 4=sales_agent/host, 5=guest
  isDefault         Boolean  @default(false)
  isDefaultAppRole  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  resource    String
  action      String
  excludeRoles Json?   // Array of role names that cannot have this permission, or '*' for all roles, '**' for custom roles
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  roles       RolePermission[]
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Otp {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  secret     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model EmailVerification {
  id         String    @id @default(uuid())
  email      String    
  code       String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  
  @@index([email])
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  email     String    
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([email])
  @@index([token])
}

model Company {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String
  businessSector String
  businessUnit  String
  host          String    @unique
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  timezone      String? @default("America/Mexico_City")
  currency      String? @default("MXN")
  logoUrl       String?
  websiteUrl    String?
  privacyPolicyUrl String?
  language      String @default("es-MX")

  industrySector EnumIndustrySector @default(OTHER)
  industryOperationChannel EnumIndustryOperationChannel @default(MIXED)
  
  // Parent company relationship (self-referential)
  parentCompanyId String?
  parentCompany   Company? @relation("CompanyHierarchy", fields: [parentCompanyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subsidiaries    Company[] @relation("CompanyHierarchy")
  
  address       Address?
  users         User[]
  assistants    CompanyAIAssistant[]
  eventsCatalog CompanyEventsCatalog[]
  schedules     CompanySchedules[]
  userSchedules UserSchedules[]
  
  @@index([parentCompanyId])
}

model Address {
  id              String    @id @default(uuid())
  country         String
  state           String
  city            String
  street          String
  exteriorNumber  String
  interiorNumber  String?
  postalCode      String
  companyId       String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Track password reset attempts for rate limiting (3 per day)
model PasswordResetAttempt {
  id        String   @id @default(uuid())
  email     String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
}

model File {
  id          String    @id @default(uuid())
  filename    String
  originalName String
  path        String
  mimeType    String
  size        Int
  bucket      String
  userId      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
}