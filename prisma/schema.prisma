// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r tsconfig-paths/register prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumAssistantArea {
  BRAND_EXPERT // Lily
  MARKETING_ASSISTANT // Zoe
  FINCANCE_ASSISTANT // Oscar
  UPSELL_ASSISTANT // Niko
}

enum EnumIndustrySector {
  AUTOMOTIVE
  CUSTOMER_SERVICE
  EDUCATION
  HEALTHCARE
  REAL_ESTATE
  OTHER
}

enum EnumIndustryOperationChannel {
  ONLINE
  PHYSICAL
  MIXED
}

model CompanyEventsCatalog {
  title       Json // { en-US: "Event Title", es-MX: "Título del Evento" }
  description Json // { en-US: "Event Description", es-MX: "Descripción del Evento" }
  iconUrl     String? // URL to an icon image for the event
  color       String? // Hex color code for the event (e.g., "#FF5733")
  isActive    Boolean @default(true)
  isOnline    Boolean @default(false) // Indicates if the event is online or in-person
  isPhysical  Boolean @default(false) // Indicates if the event is physical or online
  isAppointment Boolean @default(false) // Indicates if the event is an appointment
  eventName   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String

  @@unique([companyId, eventName])
}

model CompanySchedules {
  id          String   @id @default(uuid())
  dayOfWeek   Int      // 0=Sunday, 1=Monday, ..., 6=Saturday
  startTime   DateTime // Solo hora y minutos
  endTime     DateTime // Solo hora y minutos
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String

  @@unique([companyId, dayOfWeek])
}

model AIAssistant {
  id          String                    @id @default(uuid())
  name        String                    @unique
  area        EnumAssistantArea
  available   Boolean                   @default(false)
  description Json
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  features    AIAssistantFeature[]
  assignments CompanyAIAssistant[]
}

model AIAssistantFeature {
  id             String         @id @default(uuid())
  aiAssistant    AIAssistant    @relation(fields: [aiAssistantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  aiAssistantId  String
  keyName        String
  title          Json
  description    Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  CompanyAIAssistantFeature CompanyAIAssistantFeature[]

  @@unique([keyName])
  @@index([aiAssistantId])
}

model CompanyAIAssistant {
  id             String                    @id @default(uuid())
  company        Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  aiAssistant    AIAssistant               @relation(fields: [aiAssistantId], references: [id], onDelete: Cascade)
  aiAssistantId  String
  enabled        Boolean                   @default(false)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt

  features       CompanyAIAssistantFeature[]

  @@unique([companyId, aiAssistantId])
  @@index([companyId])
  @@index([aiAssistantId])
}

model CompanyAIAssistantFeature {
  id                          String                 @id @default(uuid())
  assignment                  CompanyAIAssistant     @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId                String
  aiAssistantFeature          AIAssistantFeature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId                   String
  enabled                     Boolean                @default(false)
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt

  @@unique([assignmentId, featureId])
  @@index([assignmentId])
  @@index([featureId])
}

// por implementar
model AvatarList {
  id          String   @id @default(uuid())
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sessions {
  id           String   @id @default(uuid())
  userId       String
  sessionToken String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId])
}

model Country {
  id          String   @id @default(uuid())
  name        String   @unique
  imageUrl    String?
  phoneCode   String   @unique
  langCode    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  states        State[]

  UserAddress UserAddress[]
}

model State {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  country     Country  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId   String

  UserAddress UserAddress[]
  
  @@index([countryId])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  secondLastName String?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  otpEnabled    Boolean   @default(false)
  otpSecret     String?
  lastLoginAt   DateTime?
  companyId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  bannedUntil   DateTime?
  banReason     String?
  agentPhone    String?   // se usa para buscar a los agentes de ventas por su número de teléfono en la compañia (tenat-id)
  agentPhoneCountryCode String? @default("52") // código de país para agentPhone (ej: 52 para México)

  company       Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  roles         UserRole[]
  otps          Otp[]
  refreshTokens RefreshToken[]
  passwordResets PasswordReset[]
  files         File[]
  profile       UserProfile?
  address       UserAddress?
  sessions      Sessions[]
  auditLogs     AuditLog[]
  
  @@index([companyId])
  @@unique([agentPhone, companyId])
}

model UserProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  phone     String?
  phoneCountryCode String? @default("52") // código de país para phone (ej: 52 para México)
  avatarUrl String?
  bio       String?
  birthdate String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model UserAddress {
  id              String    @id @default(uuid())

  country   Country? @relation(fields: [countryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  countryId String?

  state     State?   @relation(fields: [stateId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  stateId   String?

  city            String?
  street          String?
  exteriorNumber  String?
  interiorNumber  String?
  postalCode      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String @unique
}

model Role {
  id                String   @id @default(uuid())
  name              String   @unique
  description       String
  hierarchyLevel    Int      @default(5) // 1=root, 2=admin, 3=manager, 4=sales_agent/host, 5=guest
  isDefault         Boolean  @default(false)
  isDefaultAppRole  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  resource    String
  action      String
  excludeRoles Json?   // Array of role names that cannot have this permission, or '*' for all roles, '**' for custom roles
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  roles       RolePermission[]
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Otp {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  secret     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model EmailVerification {
  id         String    @id @default(uuid())
  email      String    
  code       String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  
  @@index([email])
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  email     String    
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([email])
  @@index([token])
}

model Company {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String
  host          String    @unique
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  timezone      String? @default("America/Mexico_City")
  currency      String? @default("MXN")
  logoUrl       String?
  websiteUrl    String?
  privacyPolicyUrl String?
  language      String @default("es-MX")

  industrySector EnumIndustrySector @default(OTHER)
  industryOperationChannel EnumIndustryOperationChannel @default(MIXED)
  
  // Parent company relationship (self-referential)
  parentCompanyId String?
  parentCompany   Company? @relation("CompanyHierarchy", fields: [parentCompanyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subsidiaries    Company[] @relation("CompanyHierarchy")
  
  address       Address?
  users         User[]
  assistants    CompanyAIAssistant[]
  eventsCatalog CompanyEventsCatalog[]
  schedules     CompanySchedules[]
  
  @@index([parentCompanyId])
}

model Address {
  id              String    @id @default(uuid())
  country         String
  state           String
  city            String
  street          String
  exteriorNumber  String
  interiorNumber  String?
  postalCode      String
  companyId       String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Track password reset attempts for rate limiting (3 per day)
model PasswordResetAttempt {
  id        String   @id @default(uuid())
  email     String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
}

model File {
  id          String    @id @default(uuid())
  filename    String
  originalName String
  path        String
  mimeType    String
  size        Int
  bucket      String
  userId      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
}

model AuditLog {
  id        String   @id @default(uuid())
  level     String   // info, warn, error, debug, critical
  type      String   // auth, user, role, permission, company, system, api, database, security, exception, transaction
  action    String   // create, read, update, delete, login, logout, register, verify, reset, assign, revoke, access, error, exception, etc.
  message   String
  userId    String?
  metadata  Json     // Comprehensive metadata including request details, session info, etc.
  timestamp DateTime @default(now())
  context   String   // system, auth, security, api, exception, transaction, etc.
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([level, timestamp])
  @@index([type, timestamp])
  @@index([userId, timestamp])
  @@index([context, timestamp])
  @@index([timestamp])
  @@index([level, type])
  @@map("AuditLog")
}
