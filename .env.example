# ================================================================================================
# NAUTO CONSOLE BACKEND - ENVIRONMENT CONFIGURATION
# ================================================================================================
# This file contains all environment variables required for the NestJS backend application.
# 
# SETUP INSTRUCTIONS:
# 1. Copy this file to .env (for development) or appropriate environment file
# 2. Update all placeholder values with your actual configuration
# 3. Never commit .env files with real secrets to version control
# 4. Each section is clearly marked with boundaries for easy navigation
# ================================================================================================

# ================================================================================================
# CORE APPLICATION SETTINGS
# ================================================================================================
NODE_ENV=development
PORT=3001
APP_NAME=NestJS Template
API_URL=http://localhost:3001
API_VERSION=v1
APP_VERSION=0.1.0
VALIDATE_TENANT_HOST=false

# ================================================================================================
# DATABASE CONFIGURATION
# ================================================================================================
# PostgreSQL connection string - Update with your database credentials
DATABASE_URL=postgresql://username:password@localhost:5432/database_name?schema=public

# Database connection pool settings (optimized for high performance)
# Maximum number of connections in the pool (default: 50, tune based on your workload)
# For high-concurrency apps: 50-100, for low traffic: 10-20
DATABASE_CONNECTION_LIMIT=50
# Connection timeout in seconds (how long to wait for a connection from pool)
# Increased from 10s to 30s to handle burst traffic better
DATABASE_POOL_TIMEOUT=30
# Query timeout in milliseconds (max time for a single query)
# Reduced from 30s to 10s for faster failure detection
DATABASE_QUERY_TIMEOUT=10000

# ================================================================================================
# JWT AUTHENTICATION CONFIGURATION
# ================================================================================================
# JWT_SECRET: Must be a strong, random string (minimum 32 characters)
JWT_SECRET=your_jwt_secret_here
# JWT_ALGORITHM: Algorithm for JWT signing (HS256, HS384, HS512, RS256, RS384, RS512)
# HS512 provides maximum security for symmetric key algorithms
JWT_ALGORITHM=HS512
# Token expiration times (use: s, m, h, d for seconds, minutes, hours, days)
JWT_ACCESS_EXPIRATION=15m
JWT_REFRESH_EXPIRATION=7d

# ================================================================================================
# OTP (ONE-TIME PASSWORD) CONFIGURATION
# ================================================================================================
# OTP_SECRET: Base32 secret for TOTP generation (minimum 32 characters)
OTP_SECRET=your_otp_secret_here
# OTP_EXPIRATION: How long OTP codes are valid (in minutes)
OTP_EXPIRATION=5
# OTP_STEP: Time window for OTP validity (in seconds) - standard is 30
OTP_STEP=30
# OTP_DIGITS: Number of digits in OTP codes (6 or 8)
OTP_DIGITS=6

# ================================================================================================
# SMTP EMAIL CONFIGURATION
# ================================================================================================
# For development, use MailHog (runs on localhost:1025)
# For production, use your SMTP provider settings
SMTP_HOST=localhost
SMTP_PORT=1025
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=noreply@example.com
SMTP_SECURE=false

# ================================================================================================
# FRONTEND INTEGRATION URLS
# ================================================================================================
# Base frontend URL and specific paths for email links
FRONTEND_URL=http://localhost:3000
FRONTEND_LOGIN_PATH=/login
FRONTEND_PASSWORD_RESET_PATH=/reset-password
FRONTEND_EMAIL_VERIFICATION_PATH=/verify-email
FRONTEND_DASHBOARD_PATH=/dashboard

# ================================================================================================
# API DOCUMENTATION (SWAGGER)
# ================================================================================================
# Basic auth credentials for Swagger UI access
SWAGGER_USER=admin
SWAGGER_PASSWORD=admin

# ================================================================================================
# CORS SECURITY CONFIGURATION
# ================================================================================================
# Comma-separated list of allowed origins for CORS
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# ================================================================================================
# SECURITY CONFIGURATION
# ================================================================================================
# SESSION_SECRET: Used for session signing (minimum 32 characters)
SESSION_SECRET=your_session_secret_at_least_32_characters_long

# ================================================================================================
# REQUEST SIGNATURE VALIDATION
# ================================================================================================
# Enable/disable request signature validation middleware
# WARNING: This should ALWAYS be true in staging and production environments for security
REQUEST_INTEGRITY_ENABLED=false

# Secrets for request signature validation (minimum 32 characters each)
# These secrets are used to verify request integrity and prevent man-in-the-middle attacks
SERVER_INTEGRITY_SECRET=your_server_integrity_secret_min_32_chars_required_here
BOT_INTEGRITY_SECRET=your_bot_integrity_secret_min_32_chars_required_here

# Signature validation settings
# Maximum allowed time difference between request timestamp and server time (in seconds)
SIGNATURE_TIMESTAMP_SKEW_SECONDS=30

# Enable/disable debug logs for signature validation (true/false)
# Set to false in production to avoid exposing sensitive information in logs
SIGNATURE_VALIDATION_LOGS=false

# Maximum allowed content length in bytes (default: 10MB = 10485760 bytes)
# This limit is enforced before processing the request body to prevent memory exhaustion
# Adjust based on your application needs - smaller values provide better security
REQUEST_MAX_CONTENT_LENGTH=10485760

# ================================================================================================
# FILE STORAGE CONFIGURATION (MinIO/AWS S3)
# ================================================================================================
# Storage driver: Select your storage provider
# - 'minio': MinIO storage service (recommended for development and self-hosted)
# - 'aws' or 's3': AWS S3 storage service (recommended for production)
STORAGE_DRIVER=minio

# Default bucket for file storage (used by both providers)
STORAGE_DEFAULT_BUCKET=nauto-console-dev

# ================================================================================================
# MULTIPART UPLOAD CONCURRENCY CONTROL
# ================================================================================================
# Global maximum simultaneous file uploads across all users (recommended: 5-10)
GLOBAL_MAX_SIMULTANEOUS_FILES=5
# Redis URL for concurrency control (reuses main Redis connection)
REDIS_URL=redis://127.0.0.1:6379
# Presigned URL expiration time in seconds (1 hour = 3600)
PRESIGN_EXPIRY_SEC=3600
# Maximum presigned URL expiration time in hours
PRESIGN_MAX_EXPIRY_HOURS=24
# Minimum presigned URL expiration time in seconds
PRESIGN_MIN_EXPIRY_SECONDS=60
#
SLOT_TTL_SECONDS=7200
# Booking TTL in seconds (self-cleaning in case of aborts/dropped clients)
RESERVATION_TTL=7200

# ================================================================================================
# MINIO CONFIGURATION (Development)
# ================================================================================================
# MinIO server endpoint (without protocol for config, with protocol in endpoint)
MINIO_ENDPOINT=http://127.0.0.1:9000
MINIO_PORT=9000
MINIO_USE_SSL=false
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_REGION=us-east-1
# OBSOLETE: MINIO_BUCKET_NAME - Use STORAGE_DEFAULT_BUCKET instead
# Force path-style requests (required for MinIO)
MINIO_FORCE_PATH_STYLE=true

# ================================================================================================
# AWS S3 CONFIGURATION (Production/Cloud)
# ================================================================================================
# When STORAGE_DRIVER=aws, these settings configure AWS S3 access

# AWS S3 endpoint (leave empty for standard AWS S3, set URL for S3-compatible services)
AWS_S3_ENDPOINT=
# AWS region for S3 bucket (choose region closest to your users for better performance)
AWS_REGION=us-east-1
# AWS credentials (can also use IAM roles in production)
# For production, consider using IAM roles instead of access keys
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# OBSOLETE: AWS_S3_BUCKET_NAME - Use STORAGE_DEFAULT_BUCKET instead
# Force path-style requests (false for AWS S3, true for some S3-compatible services)
AWS_S3_FORCE_PATH_STYLE=false

# Additional AWS S3 Features (uncomment to enable):
# AWS_S3_SERVER_SIDE_ENCRYPTION=AES256
# AWS_S3_STORAGE_CLASS=STANDARD
# AWS_S3_TRANSFER_ACCELERATION=false

# ================================================================================================
# SMS SERVICE CONFIGURATION
# ================================================================================================
# SMS Masivos API for sending SMS notifications
SMS_MASIVOS_API_URL=https://app.smsmasivos.com.mx/sms/send
SMS_MASIVOS_API_KEY=your_sms_api_key

# ================================================================================================
# EMAIL SERVICE CONFIGURATION
# ================================================================================================
# Provider: mailhog (dev), resend (prod), smtp (custom)
EMAIL_PROVIDER=mailhog
SUPPORT_EMAIL=support@yourdomain.com
NO_REPLY_EMAIL=noreply@yourdomain.com

# Email template branding
EMAIL_COMPANY_LOGO_URL=https://riaowrkbfhrhwcwqnamr.supabase.co/storage/v1/object/public/assets//logo%20nauto%20sin%20letras.png
EMAIL_PRIMARY_COLOR=ea337e
EMAIL_SECONDARY_COLOR=9fb2ec

# Resend service configuration (production email provider)
RESEND_API_KEY=your_resend_api_key
RESEND_FROM_EMAIL=noreply@yourdomain.com
RESEND_API_URL=https://api.resend.com/emails

# ================================================================================================
# RATE LIMITING & THROTTLING
# ================================================================================================
# Global throttling settings
THROTTLER_TTL=60
THROTTLER_LIMIT=10
# Set to 'true' to disable throttling in test/development environments (NOT for production)
THROTTLER_DISABLE_FOR_TESTING=false

# ================================================================================================
# LOGGING CONFIGURATION
# ================================================================================================
# LOG_LEVEL controls the verbosity and detail level of application logs
# 
# Available levels (from least to most verbose):
# - error:   Only critical errors that may cause application failure
# - warn:    Warnings about potential issues, deprecated features, failed operations
# - info:    General application flow, successful operations, user actions
# - debug:   Detailed information for troubleshooting, variable values, method calls
# - verbose: Extremely detailed logs including internal library operations
#
# Level hierarchy (each level includes all levels above it):
# error < warn < info < debug < verbose
#
# Recommendations by environment:
# - Production:  'error' or 'warn' (minimal logging for performance)
# - Staging:     'info' (balanced logging for monitoring)
# - Development: 'debug' (detailed logs for development)
# - Debugging:   'verbose' (maximum detail for troubleshooting)
#
# Performance impact:
# - Higher levels generate more log entries and may impact performance
# - 'verbose' level can significantly slow down the application
# - Consider log retention and storage costs in production
#
# Security note:
# - Higher log levels may expose sensitive information in logs
# - Review log outputs to ensure no secrets or PII are logged
LOG_LEVEL=info

# PRISMA_LOGS_ENABLED controls whether Prisma database logs are displayed
# 
# When enabled (true):
# - Shows SQL queries executed by Prisma
# - Displays query execution time and parameters
# - Useful for debugging database performance issues
# - Can be verbose and may impact console readability
#
# When disabled (false):
# - Suppresses all Prisma database logs
# - Cleaner console output during development
# - Recommended for production environments
#
# Recommendations:
# - Development: 'false' for cleaner output, 'true' for DB debugging
# - Production: 'false' to reduce log noise and improve performance
# - Debugging: 'true' when investigating database queries or performance
PRISMA_LOGS_ENABLED=false

# LOGGING_APM_ENABLED enables APM-ready JSON line format for log aggregation
# 
# When enabled (true):
# - Outputs structured JSON logs for APM tools (Datadog, Elasticsearch, etc.)
# - Single-line JSON format optimized for log ingestion
# - Includes correlation fields (request_id, trace_id, span_id)
# - Better for production monitoring and centralized logging
#
# When disabled (false):
# - Uses human-readable formatted logs with metadata headers
# - Multi-line format easier to read during development
# - Better for console output and local debugging
#
# Recommendations:
# - Development: 'false' for readable console output
# - Production: 'true' for structured log aggregation
# - Staging: 'true' to match production logging format
LOGGING_APM_ENABLED=false

# LOGGING_FORMAT controls the output format of log messages
#
# Available formats:
# - 'json': Single-line JSON format for APM/log aggregation tools
# - 'human': Multi-line human-readable format with metadata headers
#
# Notes:
# - If LOGGING_APM_ENABLED=true, format defaults to 'json'
# - If LOGGING_APM_ENABLED=false, format defaults to 'human'
# - This setting can override the default behavior
#
# Recommendations:
# - Development: 'human' for better readability
# - Production: 'json' for structured logging
# - CI/CD: 'json' for automated log processing
LOGGING_FORMAT=human

# ================================================================================================
# INTERNATIONALIZATION (i18n) CONFIGURATION
# ================================================================================================
# Default language/locale for the application
DEFAULT_LOCALE=en
# Fallback locale when requested locale is not available
FALLBACK_LOCALE=en
# Comma-separated list of supported locales/languages
SUPPORTED_LOCALES=en,ar

# ================================================================================================
# BUSINESS LOGIC CONFIGURATION
# ================================================================================================
# These settings control business rules, policies, and feature behavior

# ================================================================================================
# EMAIL VERIFICATION SETTINGS
# ================================================================================================
# Enable/disable email verification requirement for new users
EMAIL_VERIFICATION_ENABLED=true
# How long verification codes remain valid (in minutes)
EMAIL_VERIFICATION_EXPIRY_MINUTES=60

# ================================================================================================
# PASSWORD SECURITY POLICIES
# ================================================================================================
# Bcrypt salt rounds for password hashing (12 is secure default)
PASSWORD_SALT_ROUNDS=12
# Password reset link expiration time (in minutes)
PASSWORD_RESET_EXPIRY_MINUTES=30
# Minimum password length requirement
PASSWORD_MIN_LENGTH=8
# Require special characters in passwords
PASSWORD_REQUIRE_SPECIAL=true

# ================================================================================================
# AUTHENTICATION RATE LIMITING
# ================================================================================================
# Maximum failed login attempts per email before lockout
RATE_LIMIT_EMAIL_ATTEMPTS=3
# Maximum failed login attempts per IP address before lockout
RATE_LIMIT_IP_ATTEMPTS=10
# Duration of lockout period (in minutes)
RATE_LIMIT_LOCKOUT_MINUTES=15

# ================================================================================================
# FILE STORAGE POLICIES (Legacy - now managed by StorageTiers and UserStorageConfig)
# ================================================================================================
# How long file download URLs remain valid (in hours)
FILE_URL_EXPIRY_HOURS=24

# ================================================================================================
# USER STORAGE CONFIGURATION
# ================================================================================================
# Default storage tier level for new users (matches StorageTiers.level)
DEFAULT_STORAGE_TIER_LEVEL=1
# Default allowed file types and mime types configuration with app-specific limits (JSON format)
# Format: {"extension": {"mimes": ["mime-type1"], "whatsAppMaxBytes": number}, ...}
DEFAULT_ALLOWED_FILE_CONFIG={"png":{"mimes":["image/png"],"whatsAppMaxBytes":5242880},"jpg":{"mimes":["image/jpeg"],"whatsAppMaxBytes":5242880},"jpeg":{"mimes":["image/jpeg"],"whatsAppMaxBytes":5242880},"txt":{"mimes":["text/plain"],"whatsAppMaxBytes":104857600},"xls":{"mimes":["application/vnd.ms-excel"],"whatsAppMaxBytes":104857600},"xlsx":{"mimes":["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],"whatsAppMaxBytes":104857600},"doc":{"mimes":["application/msword"],"whatsAppMaxBytes":104857600},"docx":{"mimes":["application/vnd.openxmlformats-officedocument.wordprocessingml.document"],"whatsAppMaxBytes":104857600},"ppt":{"mimes":["application/vnd.ms-powerpoint"],"whatsAppMaxBytes":104857600},"pptx":{"mimes":["application/vnd.openxmlformats-officedocument.presentationml.presentation"],"whatsAppMaxBytes":104857600},"pdf":{"mimes":["application/pdf"],"whatsAppMaxBytes":104857600},"csv":{"mimes":["text/csv","application/csv"],"whatsAppMaxBytes":104857600},"3gp":{"mimes":["video/3gpp"],"whatsAppMaxBytes":16777216},"mp4":{"mimes":["video/mp4"],"whatsAppMaxBytes":16777216}}

# ================================================================================================
# SESSION MANAGEMENT POLICIES
# ================================================================================================
# Maximum concurrent sessions per user (-1 for unlimited)
MAX_ACTIVE_SESSIONS=3
# Session timeout due to inactivity (in minutes, -1 to disable)
SESSION_INACTIVITY_TIMEOUT=120
# Whether user activity extends session expiration
SESSION_EXTEND_ON_ACTIVITY=true

# ================================================================================================
# ADDRESS & LOCATION DEFAULTS
# ================================================================================================
# Default country/state for user registration (null for no default)
DEFAULT_COUNTRY=null
DEFAULT_STATE=null
# Whether full address is required during registration
REQUIRE_FULL_ADDRESS=false

# ================================================================================================
# TWO-FACTOR AUTHENTICATION (2FA)
# ================================================================================================
# Enable/disable OTP (One-Time Password) functionality
OTP_ENABLED=true
# Enable/disable sensitive operations validation (2FA requirement)
SENSITIVE_OPERATIONS_ENABLED=true
# Maximum OTP verification attempts before lockout
OTP_MAX_ATTEMPTS=3
# Length of OTP secrets (32 characters recommended)
OTP_SECRET_LENGTH=32

# ================================================================================================
# QUEUE SYSTEM CONFIGURATION (Redis + BullMQ)
# ================================================================================================

# ================================================================================================
# REDIS CONNECTION CONFIGURATION
# ================================================================================================
# Basic Redis connection settings
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# Redis authentication (uncomment if Redis auth is enabled)
REDIS_USER=
REDIS_PASSWORD=

# Redis TLS configuration (for production)
REDIS_TLS=false
REDIS_TLS_REJECT_UNAUTHORIZED=true
REDIS_TLS_SERVERNAME=

# ================================================================================================
# BULLMQ QUEUE CONFIGURATION
# ================================================================================================
# BullMQ queue prefix (used to organize queues in Redis)
BULLMQ_PREFIX=nauto:queues

# BULLMQ BLOCK TIMEOUT (CRITICAL for fixing "Stream isn't writeable" errors)
# Timeout in seconds for blocking commands like BZPOPMIN 
# Should be less than your load balancer/NAT idle timeout (usually 30-60s)
# Lower values prevent connection drops during idle periods
BULLMQ_BLOCK_TIMEOUT=30

# ================================================================================================
# QUEUE HEALTH & PERFORMANCE MONITORING
# ================================================================================================
# Health check interval in milliseconds (how often to check queue health)
HEALTH_CHECK_INTERVAL_MS=2000

# Queue performance thresholds for admission control
# Maximum number of jobs waiting/delayed before rejecting new jobs
BQ_MAX_BACKLOG=5000
# Maximum number of active (processing) jobs before rejecting new jobs  
BQ_MAX_ACTIVE=200

# Redis memory usage limits for health monitoring
# Maximum Redis memory usage percentage (0.0 to 1.0)
REDIS_MAX_FILL_PCT=0.85
# Maximum Redis memory usage in MB (fallback when max memory not set)
REDIS_MAX_USED_MB=2048

# Event payload size limits
# Maximum size per event in bytes (default: 256KB)
EVENT_MAX_BYTES=262144

# ================================================================================================
# BULK PROCESSING CONFIGURATION
# ================================================================================================
# Bulk processing concurrency (recommended: 1 for 512MB RAM, 2-3 for higher)
BULK_PROCESSING_CONCURRENCY=1

# Job retry configuration for bulk processing
BULK_PROCESSING_ATTEMPTS=3
BULK_PROCESSING_BACKOFF_DELAY=10000

# Stream configuration for bulk processing queue
BULK_PROCESSING_STREAM_MAXLEN=5000
BULK_PROCESSING_STREAM_APPROX=true

# File download settings for bulk processing
BULK_PROCESSING_MAX_FILE_SIZE_MB=150
BULK_PROCESSING_DOWNLOAD_TIMEOUT_MS=30000
BULK_PROCESSING_DOWNLOAD_RETRIES=2

# Maximum job timeout in milliseconds (30 minutes default)
BULK_PROCESSING_JOB_TIMEOUT=1800000

# Maximum row error logs for bulk processing
BULK_PROCESSING_MAX_STORED_ERRORS=1000
# Maximum row warnings logs for bulk processing
BULK_PROCESSING_MAX_STORED_WARNINGS=1000

# ================================================================================================
# EVENT STREAMS CONFIGURATION (Optional)
# ================================================================================================
# Maximum length of event streams (older events are removed)
QUEUE_EVENTS_STREAM_MAXLEN=20000
# Use approximate trimming for better performance (true/false)
QUEUE_EVENTS_STREAM_APPROX=true

# ================================================================================================
# EMAIL QUEUE CONFIGURATION (HIGH THROUGHPUT OPTIMIZATION)
# ================================================================================================
# Email queue processing settings optimized for MAXIMUM THROUGHPUT with modern email providers

# Email queue concurrency (number of parallel email jobs) - OPTIMIZED
# Increased from 3 to 10 for maximum parallel processing (10x throughput)
EMAIL_QUEUE_CONCURRENCY=2

# Email queue attempts (how many times to retry failed emails)
# Exponential backoff with faster retries for better user experience
EMAIL_QUEUE_ATTEMPTS=8

# Email queue retry window (hours to keep retrying failed jobs)
# Reduced for faster failure detection in cloud environments
EMAIL_QUEUE_RETRY_WINDOW_HOURS=2

# Delay between email jobs in milliseconds - HIGH SPEED OPTIMIZATION
# Reduced from 2000ms to 200ms = ~300 emails/minute (10x faster!)
# Optimized for modern email providers like Resend, SendGrid, Mailgun
EMAIL_QUEUE_DELAY_MS=500

# Email rate limiting (per minute and per hour) - HIGH THROUGHPUT LIMITS
# Optimized for modern email services: 300/min = 5 emails/sec, 10k/hour
EMAIL_RATE_LIMIT_PER_MINUTE=120
EMAIL_RATE_LIMIT_PER_HOUR=7200

# TTL-based job cleanup (memory optimization for Render)
# How long to keep completed email jobs (hours)
EMAIL_QUEUE_COMPLETED_TTL_HOURS=24
# How long to keep failed email jobs (days) 
EMAIL_QUEUE_FAILED_TTL_DAYS=7
# Maximum count of completed jobs to keep
EMAIL_QUEUE_COMPLETED_COUNT=500
# Maximum count of failed jobs to keep (increased for high volume)
EMAIL_QUEUE_FAILED_COUNT=100

# ================================================================================================
# STALE UPLOADS CLEANUP CONFIGURATION
# ================================================================================================
# Background cleanup job settings for stale multipart uploads

# Cleanup interval (minutes between cleanup runs)
STALE_UPLOADS_CLEANUP_INTERVAL_MIN=5

# Inactivity threshold (minutes of inactivity before cleanup)
STALE_UPLOADS_INACTIVITY_THRESHOLD_MIN=15

# Number of retry attempts for cleanup job
STALE_UPLOADS_CLEANUP_ATTEMPTS=3

# ================================================================================================
# UPLOADS MAINTENANCE CONFIGURATION  
# ================================================================================================
# Background maintenance job settings for active user tracking

# Maintenance interval (minutes between maintenance runs)
UPLOADS_MAINTENANCE_INTERVAL_MIN=5

# Redis scan count (number of keys to process per batch)
UPLOADS_MAINTENANCE_SCAN_COUNT=500

# Maximum execution time per maintenance run (milliseconds)
UPLOADS_MAINTENANCE_MAX_MS=4000

# Number of retry attempts for maintenance job
UPLOADS_MAINTENANCE_ATTEMPTS=1

# ================================================================================================
# END OF CONFIGURATION
# ================================================================================================
