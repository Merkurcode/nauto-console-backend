version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: nestjs-template-postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nestjs_template
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nestjs-network

  mailhog:
    image: mailhog/mailhog
    container_name: nestjs-template-mailhog
    restart: always
    ports:
      - '1025:1025' # SMTP server
      - '8025:8025' # Web UI
    networks:
      - nestjs-network

  redis:
    image: redis:7-alpine
    container_name: nestjs-template-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,KEYS,CONFIG
    networks:
      - nestjs-network

  # Optional: Redis Commander for web administration
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nestjs-template-redis-commander
    hostname: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - nestjs-network
    profiles:
      - admin

  minio:
    image: minio/minio:latest
    container_name: nestjs-template-minio
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - nestjs-network

  createbuckets:
    image: minio/mc
    container_name: nestjs-template-createbuckets
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/public;
      /usr/bin/mc mb myminio/private;
      /usr/bin/mc anonymous set download myminio/public;
      exit 0;
      "
    networks:
      - nestjs-network

  # Uncomment if you want to run the app in docker
  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: nestjs-template-api
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - postgres
  #     - mailhog
  #     - minio
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nestjs_template?schema=public
  #     - SMTP_HOST=mailhog
  #     - SMTP_PORT=1025
  #     - SMTP_USER=
  #     - SMTP_PASSWORD=
  #     - SMTP_FROM=noreply@example.com
  #     - SMTP_SECURE=false
  #     - STORAGE_DRIVER=minio
  #     - MINIO_ENDPOINT=minio
  #     - MINIO_PORT=9000
  #     - MINIO_ACCESS_KEY=minioadmin
  #     - MINIO_SECRET_KEY=minioadmin
  #     - MINIO_USE_SSL=false
  #     - MINIO_PUBLIC_BUCKET=public
  #     - MINIO_PRIVATE_BUCKET=private
  #     - FILE_STORAGE_PUBLIC_URL=http://localhost:9000/public
  #   networks:
  #     - nestjs-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  nestjs-network:
    driver: bridge
