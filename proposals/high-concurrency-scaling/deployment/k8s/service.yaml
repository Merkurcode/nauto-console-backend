apiVersion: v1
kind: Service
metadata:
  name: nauto-console-api-service
  namespace: nauto-console
  labels:
    app.kubernetes.io/name: nauto-console
    app.kubernetes.io/component: service
  annotations:
    # Load balancer configuration for high throughput
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "300"
    
    # Enable session affinity for better cache utilization
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: >
      stickiness.enabled=true,
      stickiness.type=source_ip,
      deregistration_delay.timeout_seconds=30
    
    # Health check configuration
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "3000"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval-seconds: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout-seconds: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold-count: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold-count: "3"
    
    # Performance annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: LoadBalancer
  
  # Session affinity for better performance (optional)
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300  # 5 minutes
  
  selector:
    app.kubernetes.io/name: nauto-console
    app.kubernetes.io/component: api
  
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP

---
# Internal service for metrics scraping
apiVersion: v1
kind: Service
metadata:
  name: nauto-console-api-internal
  namespace: nauto-console
  labels:
    app.kubernetes.io/name: nauto-console
    app.kubernetes.io/component: service-internal
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for direct pod access
  
  selector:
    app.kubernetes.io/name: nauto-console
    app.kubernetes.io/component: api
  
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP

---
# Ingress configuration for advanced routing and SSL termination
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nauto-console-api-ingress
  namespace: nauto-console
  labels:
    app.kubernetes.io/name: nauto-console
    app.kubernetes.io/component: ingress
  annotations:
    # Ingress class
    kubernetes.io/ingress.class: "nginx"
    
    # SSL configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting at ingress level
    nginx.ingress.kubernetes.io/rate-limit: "10000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    
    # Performance optimizations
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    
    # Connection settings for high concurrency
    nginx.ingress.kubernetes.io/upstream-keepalive-connections: "100"
    nginx.ingress.kubernetes.io/upstream-keepalive-requests: "10000"
    nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "60"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'";
    
    # Load balancing algorithm
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"
    
    # Circuit breaker
    nginx.ingress.kubernetes.io/server-snippet: |
      location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
      }

spec:
  # TLS configuration
  tls:
  - hosts:
    - api.nauto-console.com
    - nauto-console-api.example.com
    secretName: nauto-console-api-tls
  
  # Routing rules
  rules:
  - host: api.nauto-console.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nauto-console-api-service
            port:
              number: 80
      
      # Health check endpoint (bypass rate limiting)
      - path: /health
        pathType: Exact
        backend:
          service:
            name: nauto-console-api-service
            port:
              number: 80
      
      # Metrics endpoint (restricted access)
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: nauto-console-api-service
            port:
              number: 9090
  
  - host: nauto-console-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nauto-console-api-service
            port:
              number: 80