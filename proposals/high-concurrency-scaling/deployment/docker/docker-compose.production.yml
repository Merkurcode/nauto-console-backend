version: '3.8'

services:
  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: nauto-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: nauto_console
      POSTGRES_USER: nauto_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    command: |
      postgres
      -c max_connections=500
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nauto_user -d nauto_console"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nauto-network

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: nauto-postgres-replica
    restart: unless-stopped
    environment:
      PGUSER: replica_user
      POSTGRES_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
      PGPASSWORD: ${POSTGRES_REPLICA_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./scripts/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    ports:
      - "5433:5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - nauto-network

  # Redis Cluster for distributed caching
  redis-main:
    image: redis:7-alpine
    container_name: nauto-redis-main
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1 300 10 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 300
      --timeout 300
      --tcp-backlog 511
      --maxclients 10000
      --bind 0.0.0.0
    ports:
      - "6379:6379"
    volumes:
      - redis_main_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - nauto-network

  # Redis for rate limiting
  redis-rate-limit:
    image: redis:7-alpine
    container_name: nauto-redis-rate-limit
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
      --tcp-keepalive 300
      --timeout 300
      --maxclients 5000
      --bind 0.0.0.0
    ports:
      - "6380:6379"
    volumes:
      - redis_rate_limit_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - nauto-network

  # Redis for sessions
  redis-sessions:
    image: redis:7-alpine
    container_name: nauto-redis-sessions
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1 300 10
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 300
      --timeout 3600
      --maxclients 10000
      --bind 0.0.0.0
    ports:
      - "6381:6379"
    volumes:
      - redis_sessions_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - nauto-network

  # NestJS Application (multiple instances for load balancing)
  app-1:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: nauto-app-1
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      INSTANCE_ID: app-1
      
      # Database URLs
      DATABASE_URL: postgresql://nauto_user:${POSTGRES_PASSWORD}@postgres-primary:5432/nauto_console?schema=public
      DATABASE_READ_URL: postgresql://nauto_user:${POSTGRES_REPLICA_PASSWORD}@postgres-replica:5432/nauto_console?schema=public
      
      # Redis URLs
      REDIS_URL: redis://redis-main:6379
      REDIS_RATE_LIMIT_URL: redis://redis-rate-limit:6379
      REDIS_SESSION_URL: redis://redis-sessions:6379
      
      # Performance settings
      NODE_MAX_OLD_SPACE_SIZE: 2048
      UV_THREADPOOL_SIZE: 128
      
      # Scaling configuration
      DATABASE_CONNECTION_LIMIT: 50
      DATABASE_READ_POOL_SIZE: 30
      DATABASE_WRITE_POOL_SIZE: 20
    ports:
      - "3001:3000"
      - "9091:9090"  # Metrics
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica:
        condition: service_healthy
      redis-main:
        condition: service_healthy
      redis-rate-limit:
        condition: service_healthy
      redis-sessions:
        condition: service_healthy
    volumes:
      - app_logs_1:/app/logs
      - app_uploads_1:/app/uploads
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nauto-network

  app-2:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: nauto-app-2
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      INSTANCE_ID: app-2
      
      # Database URLs
      DATABASE_URL: postgresql://nauto_user:${POSTGRES_PASSWORD}@postgres-primary:5432/nauto_console?schema=public
      DATABASE_READ_URL: postgresql://nauto_user:${POSTGRES_REPLICA_PASSWORD}@postgres-replica:5432/nauto_console?schema=public
      
      # Redis URLs
      REDIS_URL: redis://redis-main:6379
      REDIS_RATE_LIMIT_URL: redis://redis-rate-limit:6379
      REDIS_SESSION_URL: redis://redis-sessions:6379
      
      # Performance settings
      NODE_MAX_OLD_SPACE_SIZE: 2048
      UV_THREADPOOL_SIZE: 128
      
      # Scaling configuration
      DATABASE_CONNECTION_LIMIT: 50
      DATABASE_READ_POOL_SIZE: 30
      DATABASE_WRITE_POOL_SIZE: 20
    ports:
      - "3002:3000"
      - "9092:9090"  # Metrics
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica:
        condition: service_healthy
      redis-main:
        condition: service_healthy
      redis-rate-limit:
        condition: service_healthy
      redis-sessions:
        condition: service_healthy
    volumes:
      - app_logs_2:/app/logs
      - app_uploads_2:/app/uploads
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nauto-network

  app-3:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: nauto-app-3
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      INSTANCE_ID: app-3
      
      # Database URLs
      DATABASE_URL: postgresql://nauto_user:${POSTGRES_PASSWORD}@postgres-primary:5432/nauto_console?schema=public
      DATABASE_READ_URL: postgresql://nauto_user:${POSTGRES_REPLICA_PASSWORD}@postgres-replica:5432/nauto_console?schema=public
      
      # Redis URLs
      REDIS_URL: redis://redis-main:6379
      REDIS_RATE_LIMIT_URL: redis://redis-rate-limit:6379
      REDIS_SESSION_URL: redis://redis-sessions:6379
      
      # Performance settings
      NODE_MAX_OLD_SPACE_SIZE: 2048
      UV_THREADPOOL_SIZE: 128
      
      # Scaling configuration
      DATABASE_CONNECTION_LIMIT: 50
      DATABASE_READ_POOL_SIZE: 30
      DATABASE_WRITE_POOL_SIZE: 20
    ports:
      - "3003:3000"
      - "9093:9090"  # Metrics
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica:
        condition: service_healthy
      redis-main:
        condition: service_healthy
      redis-rate-limit:
        condition: service_healthy
      redis-sessions:
        condition: service_healthy
    volumes:
      - app_logs_3:/app/logs
      - app_uploads_3:/app/uploads
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nauto-network

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: nauto-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - app-1
      - app-2
      - app-3
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nauto-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: nauto-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - nauto-network

  grafana:
    image: grafana/grafana:latest
    container_name: nauto-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - nauto-network

# Volumes for persistent data
volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_main_data:
    driver: local
  redis_rate_limit_data:
    driver: local
  redis_sessions_data:
    driver: local
  app_logs_1:
    driver: local
  app_logs_2:
    driver: local
  app_logs_3:
    driver: local
  app_uploads_1:
    driver: local
  app_uploads_2:
    driver: local
  app_uploads_3:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  nauto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16