apiVersion: apps/v1
kind: Deployment
metadata:
  name: nauto-console-api
  namespace: nauto-console
  labels:
    app.kubernetes.io/name: nauto-console
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  # Scaling configuration for 1M+ users
  replicas: 20  # Start with 20 replicas, auto-scale from there
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%   # Allow 25% pods to be unavailable during updates
      maxSurge: 50%         # Allow 50% extra pods during updates
  
  selector:
    matchLabels:
      app.kubernetes.io/name: nauto-console
      app.kubernetes.io/component: api
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nauto-console
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        # Prometheus monitoring annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        
        # Performance annotations
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    
    spec:
      # Spread pods across nodes and zones for high availability
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: nauto-console
            app.kubernetes.io/component: api
      - maxSkew: 2
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: nauto-console
            app.kubernetes.io/component: api
      
      # Anti-affinity to spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: nauto-console
                  app.kubernetes.io/component: api
              topologyKey: kubernetes.io/hostname
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Service account for RBAC
      serviceAccountName: nauto-console-api
      
      # Init container for database migrations
      initContainers:
      - name: migrate-database
        image: nauto-console:latest
        imagePullPolicy: Always
        command:
        - sh
        - -c
        - |
          echo "Running database migrations..."
          npx prisma migrate deploy
          echo "Database migrations completed"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: nauto-console-secrets
              key: database-url
        envFrom:
        - configMapRef:
            name: nauto-console-config
        - secretRef:
            name: nauto-console-secrets
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      
      containers:
      - name: api
        image: nauto-console:latest
        imagePullPolicy: Always
        
        # Resource allocation optimized for high concurrency
        resources:
          requests:
            cpu: 1000m      # 1 CPU core minimum
            memory: 2Gi     # 2GB RAM minimum
          limits:
            cpu: 4000m      # 4 CPU cores maximum
            memory: 8Gi     # 8GB RAM maximum
        
        # Environment variables from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: nauto-console-config
        - secretRef:
            name: nauto-console-secrets
        
        # Override specific environment variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Ports
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Health checks optimized for high load
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for slower initialization
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-startup-probe"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        
        # Volume mounts for logs and temporary files
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: temp-storage
          mountPath: /tmp
        - name: app-config
          mountPath: /app/config
          readOnly: true
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                echo "Received SIGTERM, starting graceful shutdown..."
                sleep 15  # Allow time for load balancer to remove pod
      
      # Volumes
      volumes:
      - name: app-logs
        emptyDir:
          sizeLimit: 1Gi
      - name: temp-storage
        emptyDir:
          sizeLimit: 2Gi
      - name: app-config
        configMap:
          name: nauto-console-config
      
      # Termination settings
      terminationGracePeriodSeconds: 60
      
      # Node selection preferences
      nodeSelector:
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: m5.xlarge  # Prefer compute-optimized instances
      
      # Tolerations for dedicated nodes
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "nauto-console"
        effect: "NoSchedule"
      
      # DNS policy for faster service discovery
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "1"
        - name: edns0

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nauto-console-api
  namespace: nauto-console
  labels:
    app.kubernetes.io/name: nauto-console
    app.kubernetes.io/component: api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: nauto-console
  name: nauto-console-api-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nauto-console-api-rolebinding
  namespace: nauto-console
subjects:
- kind: ServiceAccount
  name: nauto-console-api
  namespace: nauto-console
roleRef:
  kind: Role
  name: nauto-console-api-role
  apiGroup: rbac.authorization.k8s.io