# Multi-stage Dockerfile optimized for 1M+ concurrent users
FROM node:18-alpine AS base
WORKDIR /app

# Install dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libc6-compat \
    && ln -sf python3 /usr/bin/python

# Dependencies stage
FROM base AS deps
COPY package*.json ./
# Install dependencies with optimizations
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force

# Build stage
FROM base AS build
COPY package*.json ./
RUN npm ci --no-audit --no-fund

COPY . .
COPY .env.example .env

# Generate Prisma client and build application
RUN npx prisma generate
RUN npm run build
RUN npm prune --production

# Production stage optimized for high concurrency
FROM node:18-alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Install dumb-init for proper signal handling in containers
RUN apk add --no-cache dumb-init

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /tmp/sessions
RUN chown -R nestjs:nodejs /app /tmp/sessions

WORKDIR /app

# Copy built application
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nestjs:nodejs /app/package.json ./package.json
COPY --from=build --chown=nestjs:nodejs /app/prisma ./prisma

# Copy startup scripts
COPY --chown=nestjs:nodejs scripts/docker-entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh

# Set environment variables for production optimization
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048 --optimize-for-size"

# Performance tuning for high concurrency
ENV UV_THREADPOOL_SIZE=128
ENV NODE_MAX_OLD_SPACE_SIZE=2048

# Optimize for container networking
ENV HOST=0.0.0.0
ENV PORT=3000

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node dist/health-check.js || exit 1

# Switch to non-root user
USER nestjs

# Expose application port
EXPOSE 3000

# Use dumb-init for proper process handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["./entrypoint.sh"]